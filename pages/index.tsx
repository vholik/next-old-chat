import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useContext, useEffect, useState } from "react";
import styled from "styled-components";
import Status from "../public/images/msg-sent.svg";
import Send from "../public/images/send.svg";
import { Context } from "./_app";
import { useAuthState } from "react-firebase-hooks/auth";
import { useCollectionData } from "react-firebase-hooks/firestore";
import firebase from "firebase/compat/app";
import "firebase/compat/auth";
import "firebase/compat/firestore";
import { useRef } from "react";
import Router from "next/router";

const Home: NextPage = () => {
  const { auth, firestore } = useContext(Context);
  const [user, loading, error] = useAuthState(auth);
  const [messages] = useCollectionData(
    firestore.collection("messages").orderBy("createdAt")
  );

  const chat = useRef<null | HTMLDivElement>(null);

  const [value, setValue] = useState("");

  const scrollToBottom = () => {
    (chat.current as any)?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const sendMessage = () => {
    if (!user) {
      alert("Login first");
      Router.push("/login");
      return;
    }
    if (!value) return null;
    (chat as any).current?.scrollIntoView({ behavior: "smooth" });
    firestore.collection("messages").add({
      uid: user.uid,
      photoUrl: user.photoURL,
      text: value,
      createdAt: firebase.firestore.FieldValue.serverTimestamp(),
      id: Math.random() * 100,
    });
    setValue("");
  };

  const filterTime = (time: any) => {
    const timestamp = time.createdAt?.toDate();
    const messageTime = String(timestamp)
      ?.split(" ")[4]
      ?.split(":")
      .slice(0, 2);
    if (messageTime) {
      return `${messageTime[0]}:${messageTime[1]}`;
    }
    return "No data";
  };

  useEffect(() => {
    chat.current?.scrollTo({
      top: chat.current.scrollHeight,
      left: 0,
      behavior: "smooth",
    });
  }, [messages]);

  if (loading) return <div>Loading</div>;

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <HomeStyle>
        <div className="messages-wrapper" ref={chat}>
          {messages?.map((msg) => (
            <div
              className={
                msg.uid === user?.uid ? "message own-message" : "message"
              }
              key={msg.id}
            >
              <div
                className="profile-img"
                style={{
                  backgroundImage: `url('${msg.photoUrl}')`,
                }}
              ></div>
              <div className="message-box">
                <p className="message-text">{msg.text}</p>
                <div className="message-status">
                  <p className="message-time">{filterTime(msg)}</p>
                  <Image src={Status} alt={"Status"} />
                </div>
              </div>
            </div>
          ))}
        </div>
        <div className="form">
          <input
            type="text"
            className="input"
            placeholder="Type something..."
            value={value}
            onChange={(e) => setValue(e.target.value)}
          />
          <div className="button-wrapper">
            <button onClick={sendMessage}>
              <Image src={Send} alt="Send" />
              Send
            </button>
          </div>
        </div>
      </HomeStyle>
    </div>
  );
};

const HomeStyle = styled.div`
  display: flex;
  flex-direction: column;
  height: 80vh;

  .messages-wrapper {
    margin-top: auto;
    padding: 25px 25px;
    overflow: scroll;
    height: 100%;
    overflow-x: hidden;
  }
  .button-wrapper {
    display: flex;
    justify-content: end;
    button {
      margin-right: 25px;
      display: flex;
      justify-content: end;
      gap: 5px;
      font-size: 16px;
      background-color: var(--black);
      color: var(--white);
      font-family: "Inter", sans-serif;
      font-weight: 500;
      outline: none;
      border: none;
      cursor: pointer;
      padding: 20px 50px;
      width: fit-content;
      margin-top: 25px;
    }
  }
  .input {
    width: 100%;
    border: none;
    border-top: 1px solid var(--black);
    font-family: "Inter", sans-serif;
    font-size: 16px;
    color: var(--black);
    outline: none;
    padding: 25px 10px;
    &::placeholder {
      color: rgba(0, 0, 0, 0.6);
    }
  }

  .message {
    margin-bottom: 45px;
    display: flex;
    align-items: center;
    gap: 10px;
    .profile-img {
      background-size: cover !important;
      display: block;
      height: 65px;
      width: 65px;
      /* background-color: gray; */
      border-radius: 50%;
    }
    .message-box {
      background-color: #f1ffef;
      padding: 16px;
      font-size: 16px;
      color: var(--black);
      .message-status {
        justify-content: end;
        margin-top: 5px;
        font-size: 14px;
        color: #68716e;
        display: flex;
        gap: 5px;
      }
    }
  }
  .own-message {
    justify-content: end;
    .message-box {
      background-color: #f1f5fb;
    }
    .profile-img {
      display: none;
    }
  }
`;

export default Home;
